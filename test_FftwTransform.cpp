#include <iostream>
#include <vector>
#include <complex>
#include <iterator>
#include <algorithm>
#include <functional>


#include <boost/range.hpp>
#include <boost/range/algorithm.hpp>

#include <FftwTransform.hpp>
#include <Waveform.hpp>

#include <gtest/gtest.h>


namespace {

class FftwTransformTest : public ::testing::Test {
	protected:

	FftwTransformTest()
	{

	}

	virtual
	~FftwTransformTest()
	{

	}

	virtual
	void
	SetUp()
	{
		fDomain_.resize(tDomain_.size());
	}

	virtual
	void
	TearDown()
	{

	}

	//blah
	
	double nearVal = 0.00001;

	std::vector<double> tDomain_{0.000069723, 0.0000669801, 0.0000649373, 0.0000629272, 0.0000612033, 0.0000596967, 0.0000580834, 0.0000563558, 0.0000548059, 0.0000517904, 0.0000489365, 0.0000475051, 0.0000446595, 0.0000387849, 0.000029462, 0.0000310918, 0.0000429959, 0.0000559752, 0.0000422251, 2.34152e-6, -0.0000306928, -1.6542e-6, 0.0000625228, 0.000149972, 0.0000163033, -0.000151445, -0.0000617592, 0.0000658249, -0.000189109, -0.000145963, -0.000265238, -0.000189341, 0.000359469, 0.000929862, -0.000507273, -0.00266354, -0.00346909, -0.0014304, 0.000505099, 0.00565233, 0.00268749, -0.0021453, -0.00704728, -0.00798463, -0.0126706, -0.00476589, 0.00285371, 0.0111981, 0.00251049, 0.000141942, -0.0114361, -0.00713103, 0.00915937, -0.0426054, -0.245048, 0.294121, 0.573692, -0.787206, -0.706752, 0.663176, 0.550089, 0.0513639, -0.473882, -0.354662, -0.0489873, 0.240936, 0.33022, 0.0722571, -0.108936, -0.325009, -0.271801, -0.0893083, 0.186103, 0.245753, 0.176571, 0.0323298, -0.054133, -0.163042, -0.203479, -0.172819, -0.0264531, 0.0863983, 0.151017, 0.139111, 0.0907815, -0.000276616, -0.0931765, -0.104342, -0.103702, -0.0856223, -0.0119351, 0.0657995, 0.101184, 0.0989509, 0.0747166, 0.0215124, -0.0252346, -0.053809, -0.0567912, -0.0531626, -0.0479862, -0.0177793, 0.0472359, 0.0709658, 0.0525359, 0.0213136, -0.00762077, -0.0193717, -0.0282366, -0.0367907, -0.0441569, -0.0356106, -0.0124185, 0.0112791, 0.0250107, 0.0309521, 0.0276434, 0.0129403, -0.0031297, -0.0177604, -0.0294523, -0.0304732, -0.0258845, -0.0177816, -0.00204156, 0.0127938, 0.0192862, 0.0140057, 0.00837937, 0.00465914, 0.00124506, -0.00579706, -0.0134437, -0.016358, -0.0172302, -0.0134716, -0.00646195, 0.00070141, 0.00730883, 0.011202, 0.0115083, 0.00666054, -0.00231752, -0.00607003, -0.00493717, -0.00414155, -0.00527888, -0.00941737, -0.0103471, -0.00583439, 0.000863245, 0.00583372, 0.00762418, 0.00615691, 0.00239808, -0.00123251, -0.00240054, -0.00295256, -0.00410912, -0.00464638, -0.00428287, -0.00303564, -0.00136928, -0.000193944, 0.00106172, 0.0023239, 0.00290728, 0.00276749, 0.000686104, -0.00102552, -0.00188957, -0.00260681, -0.00270782, -0.00199157, -0.00122065, -0.000605637, 0.000233239, 0.00077, 0.001101, 0.00114675, 0.000999776, 0.000564214, 0.000136931, -0.000320602, -0.000602047, -0.00082134, -0.000998544, -0.00101084, -0.000774967, -0.000416091, 0.000131403, 0.000532033, 0.00071742, 0.000700766, 0.000534203, 0.000323718, 0.0000625054, -0.000183316, -0.000373147, -0.000493602, -0.000463524, -0.000275936, -0.0000191424, 0.000198164, 0.000322327, 0.000394152, 0.000416653, 0.000376521, 0.000266606, 0.000141883, 0.000047311, -0.0000168986, -0.0000590419, -0.0000625026, -0.0000111573, 0.0000462337, 0.000105006, 0.000181189, 0.000225738, 0.000231936, 0.000216246, 0.000196612, 0.000169317, 0.000131116, 0.0000859758, 0.0000508931, 0.0000497328, 0.0000626155, 0.0000738655, 0.0000851699, 0.000103081, 0.000118177, 0.00011876, 0.000121784, 0.000122693, 0.000117846, 0.00010564, 0.0000934953, 0.0000880018, 0.0000831342, 0.0000821427, 0.0000828027, 0.0000885862, 0.0000924464, 0.000097427, 0.0000986633, 0.0000990483, 0.0000995723, 0.0000972888, 0.0000944287, 0.0000933896, 0.0000932408, 0.0000926983, 0.0000909193, 0.0000882532, 0.0000860885, 0.0000826242, 0.0000789914, 0.0000757509, 0.0000726354};


	std::vector< std::complex<double> > fDomain_{{-0.536731, 0.}, {0.116643, 0.4005}, {0.265815, 
  0.0217018}, {0.0996788, -0.297668}, {-0.31848, -0.0647376}, \
{0.0179342, 
  0.277739}, {0.179984, -0.0866918}, {-0.101375, -0.0594109}, \
{0.0305987, 0.0630456}, {-0.000533327, -0.0736771}, {-0.0623555, 
  0.0566554}, {0.0757445, 
  0.0249064}, {-0.014883, -0.0627508}, {-0.022547, 
  0.0387356}, {0.0430191, -0.0201246}, {-0.062989, -0.0377699}, \
{-0.0177256, 0.0934975}, {0.0895199, 
  0.00111816}, {0.0589272, -0.0402895}, {-0.185146, -0.187497}, \
{0.110893, 0.219611}, {-0.405438, 0.0668161}, {1.08579, 
  0.326291}, {-0.789417, -1.55628}, {-0.936574, 
  1.8729}, {2.22423, -0.222091}, {-1.29905, -1.84162}, {-1.06378, 
  1.9384}, {2.16239, 0.243806}, {-0.481314, -2.09998}, {-1.86012, 
  1.07844}, {1.54412, 
  1.48625}, {1.07689, -1.85084}, {-2.07382, -0.709993}, {-0.417505, 
  2.23152}, {2.42312, 0.261892}, {0.0814679, -2.69378}, {-2.80139, 
  0.119472}, {0.0776657, 2.79799}, {2.92354, 
  0.0938152}, {0.210816, -3.03911}, {-3.07482, -0.41336}, {-0.654206, 
  3.17478}, {3.22557, 
  0.794957}, {0.96716, -3.09213}, {-2.89693, -1.29541}, {-1.67745, 
  2.73351}, {2.56829, 
  2.06673}, {2.39004, -2.44835}, {-2.25109, -2.50543}, {-2.53607, 
  1.81039}, {1.24513, 
  2.6418}, {2.74398, -0.683356}, {-0.101284, -2.80538}, {-2.84409, \
-0.443874}, {-0.899153, 2.77686}, {2.53624, 
  1.32577}, {1.79881, -2.17692}, {-1.81359, -2.2796}, {-2.64971, 
  1.4608}, {1.063, 
  2.87681}, {2.97225, -0.614466}, {-0.110303, -2.95112}, {-2.8632, \
-0.413281}, {-0.882518, 2.69899}, {2.43141, 
  1.29747}, {1.64669, -2.09878}, {-1.697, -1.88342}, {-2.02378, 
  1.19694}, {0.631534, 
  2.11852}, {2.17385, -0.0719895}, {0.439798, -2.1602}, {-2.06885, \
-0.891806}, {-1.2591, 1.89958}, {1.63961, 
  1.53388}, {1.72577, -1.28946}, {-0.866295, -1.86259}, {-1.95541, 
  0.432869}, {0.0245043, 1.96289}, {1.88088, 
  0.364987}, {0.717388, -1.72314}, {-1.50058, -1.02549}, {-1.27277, 
  1.24663}, {0.969511, 
  1.42681}, {1.48751, -0.660301}, {-0.325307, -1.47704}, {-1.41654, \
-0.00927336}, {-0.320078, 1.31001}, {1.16982, 
  0.594915}, {0.809483, -1.00345}, {-0.806765, -0.95904}, {-1.04042, 
  0.590318}, {0.347973, 
  1.0538}, {1.02671, -0.0868312}, {0.16335, -0.975485}, {-0.8995, \
-0.374239}, {-0.536748, 0.783564}, {0.633285, 
  0.666464}, {0.760097, -0.471223}, {-0.299491, -0.812634}, \
{-0.838028, 0.130299}, {-0.0161044, 0.826461}, {0.771165, 
  0.153679}, {0.286137, -0.695048}, {-0.607133, -0.400418}, \
{-0.495677, 0.508993}, {0.411581, 
  0.574747}, {0.628722, -0.328485}, {-0.255237, -0.64407}, {-0.627693,
   0.177075}, {0.096811, 
  0.599898}, {0.565855, -0.0272626}, {0.0285597, -0.525504}, \
{-0.477701, -0.0704597}, {-0.10712, 0.424135}, {0.376935, 
  0.141}, {0.166383, -0.339429}, {-0.312303, -0.18341}, {-0.189181, 
  0.297989}, {0.29371, 
  0.179253}, {0.151457, -0.290566}, {-0.27641, -0.116881}, \
{-0.0920937, 0.257952}, {0.244461, 
  0.0735388}, {0.0586444, -0.231826}, {-0.218172, -0.0460498}, \
{-0.0341067, 0.196429}, {0.164037, 
  0.0249748}, {0.0170718, -0.119949}, {-0.0643121, -0.0106607}, \
{-0.00755389, 0.}, {-0.0643121, 0.0106607}, {0.0170718, 
  0.119949}, {0.164037, -0.0249748}, {-0.0341067, -0.196429}, \
{-0.218172, 0.0460498}, {0.0586444, 
  0.231826}, {0.244461, -0.0735388}, {-0.0920937, -0.257952}, \
{-0.27641, 0.116881}, {0.151457, 
  0.290566}, {0.29371, -0.179253}, {-0.189181, -0.297989}, {-0.312303,
   0.18341}, {0.166383, 
  0.339429}, {0.376935, -0.141}, {-0.10712, -0.424135}, {-0.477701, 
  0.0704597}, {0.0285597, 0.525504}, {0.565855, 
  0.0272626}, {0.096811, -0.599898}, {-0.627693, -0.177075}, \
{-0.255237, 0.64407}, {0.628722, 
  0.328485}, {0.411581, -0.574747}, {-0.495677, -0.508993}, \
{-0.607133, 0.400418}, {0.286137, 
  0.695048}, {0.771165, -0.153679}, {-0.0161044, -0.826461}, \
{-0.838028, -0.130299}, {-0.299491, 0.812634}, {0.760097, 
  0.471223}, {0.633285, -0.666464}, {-0.536748, -0.783564}, {-0.8995, 
  0.374239}, {0.16335, 0.975485}, {1.02671, 
  0.0868312}, {0.347973, -1.0538}, {-1.04042, -0.590318}, {-0.806765, 
  0.95904}, {0.809483, 
  1.00345}, {1.16982, -0.594915}, {-0.320078, -1.31001}, {-1.41654, 
  0.00927336}, {-0.325307, 1.47704}, {1.48751, 
  0.660301}, {0.969511, -1.42681}, {-1.27277, -1.24663}, {-1.50058, 
  1.02549}, {0.717388, 
  1.72314}, {1.88088, -0.364987}, {0.0245043, -1.96289}, {-1.95541, \
-0.432869}, {-0.866295, 1.86259}, {1.72577, 
  1.28946}, {1.63961, -1.53388}, {-1.2591, -1.89958}, {-2.06885, 
  0.891806}, {0.439798, 2.1602}, {2.17385, 
  0.0719895}, {0.631534, -2.11852}, {-2.02378, -1.19694}, {-1.697, 
  1.88342}, {1.64669, 
  2.09878}, {2.43141, -1.29747}, {-0.882518, -2.69899}, {-2.8632, 
  0.413281}, {-0.110303, 2.95112}, {2.97225, 
  0.614466}, {1.063, -2.87681}, {-2.64971, -1.4608}, {-1.81359, 
  2.2796}, {1.79881, 
  2.17692}, {2.53624, -1.32577}, {-0.899153, -2.77686}, {-2.84409, 
  0.443874}, {-0.101284, 2.80538}, {2.74398, 
  0.683356}, {1.24513, -2.6418}, {-2.53607, -1.81039}, {-2.25109, 
  2.50543}, {2.39004, 
  2.44835}, {2.56829, -2.06673}, {-1.67745, -2.73351}, {-2.89693, 
  1.29541}, {0.96716, 
  3.09213}, {3.22557, -0.794957}, {-0.654206, -3.17478}, {-3.07482, 
  0.41336}, {0.210816, 
  3.03911}, {2.92354, -0.0938152}, {0.0776657, -2.79799}, {-2.80139, \
-0.119472}, {0.0814679, 
  2.69378}, {2.42312, -0.261892}, {-0.417505, -2.23152}, {-2.07382, 
  0.709993}, {1.07689, 
  1.85084}, {1.54412, -1.48625}, {-1.86012, -1.07844}, {-0.481314, 
  2.09998}, {2.16239, -0.243806}, {-1.06378, -1.9384}, {-1.29905, 
  1.84162}, {2.22423, 0.222091}, {-0.936574, -1.8729}, {-0.789417, 
  1.55628}, {1.08579, -0.326291}, {-0.405438, -0.0668161}, {0.110893, \
-0.219611}, {-0.185146, 0.187497}, {0.0589272, 
  0.0402895}, {0.0895199, -0.00111816}, {-0.0177256, -0.0934975}, \
{-0.062989, 0.0377699}, {0.0430191, 
  0.0201246}, {-0.022547, -0.0387356}, {-0.014883, 
  0.0627508}, {0.0757445, -0.0249064}, {-0.0623555, -0.0566554}, \
{-0.000533327, 0.0736771}, {0.0305987, -0.0630456}, {-0.101375, 
  0.0594109}, {0.179984, 
  0.0866918}, {0.0179342, -0.277739}, {-0.31848, 
  0.0647376}, {0.0996788, 
  0.297668}, {0.265815, -0.0217018}, {0.116643, -0.4005}};

};



TEST_F(FftwTransformTest, CTor1)
{
	std::vector< std::complex<double> > fresult (tDomain_.size() / 2 + 1);
	FftwTransform myFT = FftwTransform(tDomain_.begin(), tDomain_.end(), fresult.begin());

	myFT.exec_transform();


	for (unsigned iter (0); iter < fresult.size(); ++iter)
	{
		/*
		EXPECT_DOUBLE_EQ( std::real(fresult.at(iter)), std::real(fDomain_.at(iter)) ) << "\t@\t" << iter;
		EXPECT_DOUBLE_EQ( std::imag(fresult.at(iter)), std::imag(fDomain_.at(iter)) ) << "\t@\t" << iter;
		*/
		
		EXPECT_NEAR( std::real(fresult.at(iter)), std::real(fDomain_.at(iter)), nearVal ) << "\t@\t" << iter;
		EXPECT_NEAR( std::imag(fresult.at(iter)), std::imag(fDomain_.at(iter)), nearVal ) << "\t@\t" << iter;
		
	}
}


TEST_F(FftwTransformTest, CTor2)
{

	
	std::vector< std::complex<double> > fresult (tDomain_.size() / 2 + 1);
	FftwTransform myFT = FftwTransform(tDomain_, fresult);


	myFT.exec_transform();


	for (unsigned iter (0); iter < fresult.size(); ++iter)
	{
		/*
		EXPECT_DOUBLE_EQ( std::real(fresult.at(iter)), std::real(fDomain_.at(iter)) ) << "\t@\t" << iter;
		EXPECT_DOUBLE_EQ( std::imag(fresult.at(iter)), std::imag(fDomain_.at(iter)) ) << "\t@\t" << iter;
		*/
		
		EXPECT_NEAR( std::real(fresult.at(iter)), std::real(fDomain_.at(iter)), nearVal ) << "\t@\t" << iter;
		EXPECT_NEAR( std::imag(fresult.at(iter)), std::imag(fDomain_.at(iter)), nearVal ) << "\t@\t" << iter;
		
	}


}



TEST_F(FftwTransformTest, FwTrans)
{

	std::vector< std::complex<double> > fresult (tDomain_.size() / 2 + 1);
	FftwTransform myFT = FftwTransform(tDomain_.begin(), tDomain_.end(), fresult.begin());

	myFT.exec_transform();


	for (unsigned iter (0); iter < fresult.size(); ++iter)
	{
		/*
		EXPECT_DOUBLE_EQ( std::real(fresult.at(iter)), std::real(fDomain_.at(iter)) ) << "\t@\t" << iter;
		EXPECT_DOUBLE_EQ( std::imag(fresult.at(iter)), std::imag(fDomain_.at(iter)) ) << "\t@\t" << iter;
		*/
		
		EXPECT_NEAR( std::real(fresult.at(iter)), std::real(fDomain_.at(iter)), nearVal ) << "\t@\t" << iter;
		EXPECT_NEAR( std::imag(fresult.at(iter)), std::imag(fDomain_.at(iter)), nearVal ) << "\t@\t" << iter;
		
	}


/*
	std::cout << "Time Domain:" << std::endl;
	boost::copy(tDomain_, std::ostream_iterator< double >(std::cout, "\n"));
	
	std::cout << std::endl << std::endl
		<< "Freq Domain:" << std::endl;

	boost::copy(fDomain_, std::ostream_iterator< std::complex<double> >(std::cout, "\n"));
	*/


}

TEST_F(FftwTransformTest, InvTrans)
{

	//std::vector<double> tresult ( 2 * (fDomain_.size() - 1) );
	std::vector<double> tresult (tDomain_.size());
	FftwTransform myFT = FftwTransform(tresult.begin(), tresult.end(), fDomain_.begin());

	myFT.exec_inverse_transform();

	ASSERT_EQ( tresult.size(), tDomain_.size()) << "\tfDomain size:\t" << fDomain_.size();

	
	for (auto& val : tresult)
	{
		val /= double(tresult.size());
	}
	
	for (unsigned iter (0); iter < tresult.size(); ++iter)
	{
		EXPECT_NEAR( tresult.at(iter), tDomain_.at(iter), nearVal ) << "\t@\t" << iter << "\tFactor:\t" << tresult.at(iter) / tDomain_.at(iter);
	}

}



TEST_F(FftwTransformTest, ParameterForWaveform)
{
	//std::vector< std::complex<double> > fresult (tDomain_.size() / 2 + 1);

	PS::Waveform< std::vector<double>
				, std::vector< std::complex<double> >
				, FftwTransform
				> myWfm (tDomain_);

	EXPECT_EQ(tDomain_.size(), myWfm.size());


	for (unsigned iter (0); iter < myWfm.size(); ++iter)
	{
		EXPECT_EQ(tDomain_.at(iter), myWfm.GetConstTimeSeries().at(iter));
	}
}



TEST_F(FftwTransformTest, FwdTransformInWaveform)
{
	//std::vector< std::complex<double> > fresult (tDomain_.size() / 2 + 1);

	PS::Waveform< std::vector<double>
				, std::vector< std::complex<double> >
				, FftwTransform
				> myWfm (tDomain_);

	myWfm.GetConstFreqSpectrum();

	// Because fDomain comes from Mathematica, there are around twice the number of bins as in FFTW
	EXPECT_EQ(fDomain_.size() / 2 + 1, myWfm.GetConstFreqSpectrum().size());

	for (unsigned iter (0); iter < myWfm.GetConstFreqSpectrum().size(); ++iter)
	{

		EXPECT_NEAR( std::real(myWfm.GetConstFreqSpectrum().at(iter)), std::real(fDomain_.at(iter)), nearVal ) << "\t@\t" << iter;
		EXPECT_NEAR( std::imag(myWfm.GetConstFreqSpectrum().at(iter)), std::imag(fDomain_.at(iter)), nearVal ) << "\t@\t" << iter;

	}
}

TEST_F(FftwTransformTest, RvsTransformInWaveform)
{
	std::vector<std::complex<double> > fDomainProper (fDomain_.begin(), fDomain_.begin() + 131);

	PS::Waveform< std::vector<double>
				, std::vector< std::complex<double> >
				, FftwTransform
				> myWfm (fDomainProper);

	myWfm.GetConstTimeSeries();

	/*
	for (unsigned iter (0); iter < myWfm.GetConstFreqSpectrum().size(); ++iter)
	{
		EXPECT_NEAR( std::real(myWfm.GetConstFreqSpectrum().at(iter)), std::real(fDomain_.at(iter)), nearVal ) << "\t@\t" << iter;
		EXPECT_NEAR( std::imag(myWfm.GetConstFreqSpectrum().at(iter)), std::imag(fDomain_.at(iter)), nearVal ) << "\t@\t" << iter;
	}
	*/


	//std::transform(myWfm.beginTime(), myWfm.endTime(), myWfm.beginTime(), [](auto x){return x/myWfm.size()});

	for (auto& val : myWfm.GetTimeSeries())
	{
		val /= myWfm.size();
	}

	EXPECT_EQ(tDomain_.size(), myWfm.GetConstTimeSeries().size());

	for (unsigned iter (0); iter < myWfm.GetConstTimeSeries().size(); ++iter)
	{
		EXPECT_NEAR(myWfm.GetTimeSeries().at(iter), tDomain_.at(iter), nearVal) << "\t@\t" << iter;
	}
}


}	// namespace

int
main (int argc, char** argv)
{
	::testing::InitGoogleTest(&argc, argv);
	return RUN_ALL_TESTS();
}


